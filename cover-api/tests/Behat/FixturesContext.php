<?php

/**
 * @file
 * Behat context for data fixtures.
 */

namespace App\Tests\Behat;

use App\DataFixtures\Elastic\ElasticService;
use App\DataFixtures\Faker\Search;
use Behat\Behat\Context\Context;
use Behat\Gherkin\Node\TableNode;

/**
 * Class FixturesContext.
 */
class FixturesContext implements Context
{
    private ElasticService $elasticService;

    /**
     * FixturesContext constructor.
     *
     * @param ElasticService $elasticService
     */
    public function __construct(ElasticService $elasticService)
    {
        $this->elasticService = $elasticService;
    }

    /**
     * @Given the following search entries exists:
     *
     * @param TableNode $table
     *   Gherkin table argument containing columns identifier, type, url, autogenerated, image_format
     */
    public function theFollowingIdentifiersExists(TableNode $table): void
    {
        $searches = [];
        $elasticId = 1;

        foreach ($table->getHash() as $row) {
            $search = new Search();

            $search->setId($elasticId);
            $search->setIsIdentifier($row['identifiers']);
            $search->setIsType(strtolower($row['type']));
            $search->setImageUrl($row['url']);
            $search->setImageFormat($row['image_format']);
            $search->setWidth($row['width']);
            $search->setHeight($row['height']);

            $searches[] = $search;

            ++$elasticId;
        }

        $this->elasticService->index(...$searches);
    }

    /**
     * Prepare Elastic indexes.
     *
     * @BeforeScenario @createFixtures
     */
    public function prepareIndexes(): void
    {
        $this->resetIndexes();
    }

    /**
     * Reset Elastic indexes.
     */
    private function resetIndexes(): void
    {
        $this->elasticService->deleteIndex();
        $this->elasticService->createIndex();
    }
}
