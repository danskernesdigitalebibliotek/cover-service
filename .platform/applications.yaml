# A unique name for the app. Must be lowercase alphanumeric characters. Changing the name destroys data associated
# with the app.

cover-api:

  # The runtime the application uses. The 'type' key defines the base container
  # image that will be used to run the application. There is a separate base
  # container image for each primary language for the application,
  # in multiple versions. Check the PHP documentation
  # (https://docs.platform.sh/languages/php.html#supported-versions)
  # to find the supported versions for the 'php' type.
  type: 'php:8.1'

  # How many CPU and memory resources to allocate to the app.
  size: XL

  # The size of the persistent disk of the application (in MB).
  disk: 1024

  build:
    flavor: composer

  dependencies:
    php:
      composer/composer: '^2'

  variables:
    php:
      opcache.preload: config/preload.php

  # The 'source' specifies where the writable mount is. The 'local' source
  # indicates that the mount point will point to a local directory on the
  # application container. The 'source_path' specifies the subdirectory
  # from within the source that the mount should point at.
  # The mounts that will be performed when the package is deployed.
  mounts:
    "/var/cache":
      source: local
      source_path: "cache"
    "/var/log":
      source: local
      source_path: "log"
    "/var/sessions":
      source: local
      source_path: "sessions"

  # The relationships of the application with services or other applications.
  #
  # The left-hand side is the name of the relationship as it will be exposed
  # to the application in the PLATFORM_RELATIONSHIPS variable. The right-hand
  # side is in the form '<service name>:<endpoint name>'.
  relationships:
    rabbit: 'queuerabbit:rabbitmq'
    redis: 'cachecoverapi:redis'
    search: 'searchopen:opensearch'

  hooks:
    build: |
      set -x -e
      curl -s https://get.symfony.com/cloud/configurator | bash
      symfony-build

    deploy: |
      set -x -e    
      symfony-deploy        

  # The configuration of app when it is exposed to the web.
  web:
    locations:
      "/":
        # The public directory of the app, relative to its root.
        root: "public"
        index:
          - 'index.html'
        # The front-controller script to send non-static requests to.
        passthru: "/index.php"

  # Customizations to your PHP or Lisp runtime. More information: https://docs.platform.sh/create-apps/app-reference.html#runtime
  runtime:
    sizing_hints:
      # A lean stack means that application memory usage is low.
      # This allows us to have many workers which is useful as most time is spent
      # waiting for token authorization.
      # 10MB is the Platform.sh minimum but setting this value results in
      # redirection errors so use a value 1 larger.
      request_memory: 11
    extensions:
      - apcu
      - blackfire
      - ctype
      - iconv
      - mbstring
      - pdo_pgsql
      - sodium
      - xsl
      - amqp
      - redis

  # Information on the app's source code and operations that can be run on it.
  # More information: https://docs.platform.sh/create-apps/app-reference.html#source
  source:
    # The path where the app code lives. Defaults to the directory of the .platform.app.yaml file. Useful for multi-app setups.
    root: cover-api

importers:

  # The runtime the application uses. The 'type' key defines the base container
  # image that will be used to run the application. There is a separate base
  # container image for each primary language for the application,
  # in multiple versions. Check the PHP documentation
  # (https://docs.platform.sh/languages/php.html#supported-versions)
  # to find the supported versions for the 'php' type.
  type: 'php:8.1'

  # Importers are intended to be used as workers so intentionally set as small
  # a size as possible.
  size: S

  # The size of the persistent disk of the application (in MB).
  disk: 1028

  build:
    flavor: composer

  dependencies:
    php:
      composer/composer: '^2'

  variables:
    php:
      opcache.preload: config/preload.php

  # The 'source' specifies where the writable mount is. The 'local' source
  # indicates that the mount point will point to a local directory on the
  # application container. The 'source_path' specifies the subdirectory
  # from within the source that the mount should point at.
  # The mounts that will be performed when the package is deployed.
  mounts:
    "/var/cache":
      source: local
      source_path: "cache"
    "/var/log":
      source: local
      source_path: "log"
    "/var/sessions":
      source: local
      source_path: "sessions"
    "resources":
      source: local
      source_path: "resources"

  # The relationships of the application with services or other applications.
  # The left-hand side is the name of the relationship as it will be exposed
  # to the application in the PLATFORM_RELATIONSHIPS variable. The right-hand
  # side is in the form `<service name>:<endpoint name>`.
  relationships:
    database: 'dbimporters:mysql'
    redis: 'cacheimporters:redis'
    rabbit: 'queuerabbit:rabbitmq'
    search: 'searchopen:opensearch'

  hooks:
    build: |
      set -x -e
      curl -s https://get.symfony.com/cloud/configurator | bash
      symfony-build

    deploy: |
      set -x -e    
      symfony-deploy        

  # Scheduled tasks for the app.
  # More information: https://docs.platform.sh/create-apps/app-reference.html#crons
  crons:
    # Queue nightly imports of vendors.
    # Each vendor is defined as an individual cron job for improved visibility.
    # The order corresponds to the order in the vendor table in the database
    # which would otherwise be respected when running:
    # app:vendor:load --vendor=all
    # All timeouts are set to 4 hours (14400 seconds) by default. Most should
    # not run for so long but if one or two do then this should ensure that
    # they are cleared by morning.
    # Cron jobs are only run in production. They should be run manually in all
    # other environments.
    # Each cron job can be disabled temporarily by setting a corresponding
    # environment variable.
    import-upload-service:
      spec: '1 0 * * *'
      timeout: 14400
      commands:
        start: |
          if [ "$PLATFORM_ENVIRONMENT_TYPE" = production ] && [ -z "$DISABLE_VENDOR_LOAD_UPLOAD_SERVICE" ]; then
            symfony console app:vendor:load --env=prod --no-debug --days-ago=180 --vendor=UploadService
          fi
    import-aarhus-kommune-mbu:
      spec: '2 0 * * *'
      timeout: 14400
      commands:
        start: |
          if [ "$PLATFORM_ENVIRONMENT_TYPE" = production ] && [ -z "$DISABLE_VENDOR_LOAD_AARHUS_KOMMUNE_MBU" ]; then
            symfony console app:vendor:load --env=prod --no-debug --days-ago=180 --vendor=AarhusKommuneMbu
          fi
    import-herning-bib:
      spec: '3 0 * * *'
      timeout: 14400
      commands:
        start: |
          if [ "$PLATFORM_ENVIRONMENT_TYPE" = production ] && [ -z "$DISABLE_VENDOR_LOAD_HERNING_BIB" ]; then
            symfony console app:vendor:load --env=prod --no-debug --days-ago=180 --vendor=HerningBib
          fi
    import-block-buster:
      spec: '4 0 * * *'
      timeout: 14400
      commands:
        start: |
          if [ "$PLATFORM_ENVIRONMENT_TYPE" = production ] && [ -z "$DISABLE_VENDOR_LOAD_BLOCK_BUSTER" ]; then
            symfony console app:vendor:load --env=prod --no-debug --days-ago=180 --vendor=BlockBuster
          fi
    import-pressreader:
      spec: '5 0 * * *'
      timeout: 14400
      commands:
        start: |
          if [ "$PLATFORM_ENVIRONMENT_TYPE" = production ] && [ -z "$DISABLE_VENDOR_LOAD_PRESS_READER" ]; then
            symfony console app:vendor:load --env=prod --no-debug --days-ago=180 --vendor=PressReader
          fi
    import-over-drive-magazines:
      spec: '6 0 * * *'
      timeout: 14400
      commands:
        start: |
          if [ "$PLATFORM_ENVIRONMENT_TYPE" = production ] && [ -z "$DISABLE_VENDOR_LOAD_OVER_DRIVE_MAGAZINES" ]; then
            symfony console app:vendor:load --env=prod --no-debug --days-ago=180 --vendor=OverDriveMagazines
          fi
    import-the-movie-database:
      spec: '7 0 * * *'
      #timeout: 14400
      commands:
        start: |
          if [ "$PLATFORM_ENVIRONMENT_TYPE" = production ] && [ -z "$DISABLE_VENDOR_LOAD_THE_MOVIE_DATABASE" ]; then
            symfony console app:vendor:load --env=prod --no-debug --days-ago=180 --vendor=TheMovieDatabase
          fi
    import-ebook-central:
      spec: '8 0 * * *'
      #timeout: 14400
      commands:
        start: |
          if [ "$PLATFORM_ENVIRONMENT_TYPE" = production ] && [ -z "$DISABLE_VENDOR_LOAD_EBOOK_CENTRAL" ]; then
            symfony console app:vendor:load --env=prod --no-debug --days-ago=180 --vendor=eBookCentral
          fi
    import-comics-plus:
      spec: '8 0 * * *'
      timeout: 14400
      commands:
        start: |
          if [ "$PLATFORM_ENVIRONMENT_TYPE" = production ] && [ -z "$DISABLE_VENDOR_LOAD_COMICS_PLUS" ]; then
            symfony console app:vendor:load --env=prod --no-debug --days-ago=180 --vendor=ComicsPlus
          fi
    import-publizon:
      spec: '9 0 * * *'
      timeout: 14400
      commands:
        start: |
          if [ "$PLATFORM_ENVIRONMENT_TYPE" = production ] && [ -z "$DISABLE_VENDOR_LOAD_PUBLIZON" ]; then
            symfony console app:vendor:load --env=prod --no-debug --days-ago=180 --vendor=publizon
          fi
    import-bogportalen-dk:
      spec: '10 0 * * *'
      timeout: 14400
      commands:
        start: |
          if [ "$PLATFORM_ENVIRONMENT_TYPE" = production ] && [ -z "$DISABLE_VENDOR_LOAD_BOGPORTALEN_DK" ]; then
            symfony console app:vendor:load --env=prod --no-debug --days-ago=180 --vendor=bogportalen.dk
          fi

  # The configuration of app when it is exposed to the web.
  web:
    locations:
      "/":
        # The public directory of the app, relative to its root.
        root: "public"
        # The front-controller script to send non-static requests to.
        passthru: "/index.php"

  workers:
    messenger: &messenger
      # Importers are a single worker so set a size appropriate for this.
      size: S
      disk: 256

      commands:
        # Consume "async_priority_high", "async_priority_low", "async_has_cover" & "async_no_hit"
        # messages (as configured in the routing section of config/packages/messenger.yaml)
        start: symfony console --time-limit=3600 --memory-limit=64M messenger:consume --env=prod --no-debug --no-interaction --quiet --failure-limit=1 async_priority_high async_priority_low async_has_cover async_no_hit

    # These are just duplicates of the initial worker
    messenger-2:
      <<: *messenger
    messenger-3:
      <<: *messenger
    # Final worker which will pick up any easy/final messages if available to avoid them piling up.
    messenger-low-priority:
      <<: *messenger
      commands:
        # Order of queues is reverse from other workers
        start: symfony console --time-limit=3600 --memory-limit=64M messenger:consume --env=prod --no-debug --no-interaction --quiet --failure-limit=1 async_no_hit async_has_cover async_priority_low async_priority_high

  # Customizations to your PHP or Lisp runtime. More information: https://docs.platform.sh/create-apps/app-reference.html#runtime
  runtime:
    extensions:
      - apcu
      - blackfire
      - ctype
      - iconv
      - mbstring
      - pdo_pgsql
      - sodium
      - xsl
      - amqp
      - redis

  # Information on the app's source code and operations that can be run on it.
  # More information: https://docs.platform.sh/create-apps/app-reference.html#source
  source:
    # The path where the app code lives. Defaults to the directory of the .platform.app.yaml file. Useful for multi-app setups.
    root: importers

upload-api:

  # The runtime the application uses. The 'type' key defines the base container
  # image that will be used to run the application. There is a separate base
  # container image for each primary language for the application,
  # in multiple versions. Check the PHP documentation
  # (https://docs.platform.sh/languages/php.html#supported-versions)
  # to find the supported versions for the 'php' type.
  type: 'php:8.1'

  # How many CPU and memory resources to allocate to the app.
  size: M

  # The size of the persistent disk of the application (in MB).
  disk: 256

  build:
    flavor: composer

  dependencies:
    php:
      composer/composer: '^2'

  variables:
    php:
      opcache.preload: config/preload.php

  # The 'source' specifies where the writable mount is. The 'local' source
  # indicates that the mount point will point to a local directory on the
  # application container. The 'source_path' specifies the subdirectory
  # from within the source that the mount should point at.
  # The mounts that will be performed when the package is deployed.
  mounts:
    "/var/cache":
      source: local
      source_path: "cache"
    "/var/log":
      source: local
      source_path: "log"
    "/var/sessions":
      source: local
      source_path: "sessions"
    "public/cover":
      source: local
      source_path: "public/cover"

  # The relationships of the application with services or other applications.
  #
  # The left-hand side is the name of the relationship as it will be exposed
  # to the application in the PLATFORM_RELATIONSHIPS variable. The right-hand
  # side is in the form '<service name>:<endpoint name>'.
  relationships:
    database: 'dbuploadapi:mysql'
    rabbit: 'queuerabbit:rabbitmq'
    redis: 'cacheuploadapi:redis'

  hooks:
    build: |
      set -x -e
      curl -s https://get.symfony.com/cloud/configurator | bash
      symfony-build

    deploy: |
      set -x -e    
      symfony-deploy        

  # Scheduled tasks for the app.
  # More information: https://docs.platform.sh/create-apps/app-reference.html#crons
  # TODO: Reenable me
  #
  #crons:
  #  # Cover service upload clean up cron job.
  #  image-cleanup:
  #    spec: '*/15 * * * *'
  #    cmd: './bin/console app:image:cleanup --no-debug'

  # The configuration of app when it is exposed to the web.
  web:
    locations:
      "/":
        # The public directory of the app, relative to its root.
        root: "public"
        # The front-controller script to send non-static requests to.
        passthru: "/index.php"

  # Customizations to your PHP or Lisp runtime. More information: https://docs.platform.sh/create-apps/app-reference.html#runtime
  runtime:
    extensions:
      - apcu
      - blackfire
      - ctype
      - iconv
      - mbstring
      - pdo_pgsql
      - sodium
      - xsl
      - amqp
      - redis

  # Information on the app's source code and operations that can be run on it.
  # More information: https://docs.platform.sh/create-apps/app-reference.html#source
  source:
    # The path where the app code lives. Defaults to the directory of the .platform.app.yaml file. Useful for multi-app setups.
    root: upload-api
