<?php

use App\Entity\Search;
use App\Entity\Source;
use App\Entity\Vendor;
use Behat\Behat\Context\Context;
use Behat\Behat\Tester\Exception\PendingException;
use Behat\Gherkin\Node\TableNode;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Tools\SchemaTool;
use FOS\ElasticaBundle\Index\IndexManager;
use FOS\ElasticaBundle\Index\Resetter;
use Symfony\Bridge\Doctrine\ManagerRegistry;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\KernelInterface;

/**
 * This context class contains the definitions of the steps used by the Behat
 * test suite.
 */
class FeatureContext implements Context
{

    private $kernel;

    private $managerRegistry;
    private $em;

    private $response;

    private $indexManager;
    private $resetter;

    /**
     * FeatureContext constructor.
     *
     * @param KernelInterface $kernel
     *   Symfony kernel
     * @param ManagerRegistry $managerRegistry
     *   Doctrine Manager Registry
     */
    public function __construct(KernelInterface $kernel, ManagerRegistry $managerRegistry)
    {
        $this->kernel = $kernel;
        $this->managerRegistry = $managerRegistry;
        $this->em = $this->managerRegistry->getManager();

        $this->indexManager = $this->kernel->getContainer()->get('fos_elastica.index_manager');
        $this->resetter = $this->kernel->getContainer()->get('fos_elastica.resetter');
    }

    /**
     * @Given the following search entries exits:
     *
     * @param TableNode $table
     *   Gherkin table argument containing columns identifier, type, url, autogenerated, image_format
     *
     * @throws Exception
     */
    public function theFollowingIdentifiersExits(TableNode $table): void
    {
        $vendor = new Vendor();
        $vendor->setId(1);
        $vendor->setName('Test');
        $vendor->setClass('Test');
        $vendor->setRank(10);

        $this->em->persist($vendor);

        foreach ($table->getHash() as $row) {
            $source = new Source();
            $source->setMatchId($row['identifier']);
            $source->setMatchType(strtolower($row['type']));
            $source->setOriginalFile($row['url']);
            $source->setDate(new \DateTime());
            $source->setVendor($vendor);

            $this->em->persist($source);

            $search = new Search();
            $search->setIsIdentifier($row['identifier']);
            $search->setIsType(strtolower($row['type']));
            $search->setImageUrl($row['url']);
            $search->setAutoGenerated($row['autogenerated'] ? 1 : 0);
            $search->setImageFormat($row['image_format']);

            $search->setHeight(100);
            $search->setWidth(100);
            $search->setImageFormat('jpeg');
            $search->setSource($source);

            $this->em->persist($search);
        }

        $this->em->flush();

        // Give elastic 1 second to build index.
        \sleep(1);
    }

    /**
     * @When a demo scenario sends a request to :path
     *
     * @param string $path
     *   Path to test exclunding base url
     *
     * @throws Exception
     */
    public function aDemoScenarioSendsARequestTo(string $path): void
    {
        $this->response = $this->kernel->handle(Request::create($path, 'GET'));
    }

    /**
     * @Then the response should be received
     */
    public function theResponseShouldBeReceived(): void
    {
        if ($this->response === null) {
            throw new \RuntimeException('No response received');
        }
    }

    /**
     * @BeforeScenario @createSchema
     */
    public function createDatabase(): void
    {
        $manager = $this->managerRegistry->getManager();
        $metadata = $manager->getMetadataFactory()->getAllMetadata();

        $schemaTool = new SchemaTool($manager);
        $schemaTool->dropSchema($metadata);
        $manager->clear();
        $schemaTool->createSchema($metadata);

        $this->resetIndex();
    }

    /**
     * Reset Elastic index
     */
    private function resetIndex(): void
    {
        $indexes = array_keys($this->indexManager->getAllIndexes());

        foreach ($indexes as $index) {
            $this->resetter->resetIndex($index, false, true);
        }
    }
}
